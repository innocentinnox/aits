name: Client Deployment
on:
  push:
    branches: ["main"]
    paths:
      - "client/**" # Only trigger for changes in that directory

jobs:
  build:
    defaults:
      run:
        working-directory: ./client
    runs-on: self-hosted
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with: # Ensure the repository is not deleted and only updated (similar to git pull)
          fetch-depth: 0
          persist-credentials: false
          clean: false

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./client/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Create the .env file from CLIENT_SECRETS
      - name: Create .env file
        run: echo "${{ secrets.CLIENT_SECRETS }}" > .env

      # Install dependencies
      - name: Install dependencies
        run: npm i

      # Build the application
      - name: Build the application
        run: npm run build

      # Deploy to production directory
      - name: Deploy to /home/aits/htdocs/aits.ocunex.com
        run: |
          set -e # Explicitly stop on errors
          
          # Define target directory
          TARGET_DIR="/home/aits/htdocs/aits.ocunex.com"
          
          # Create backup directory with timestamp
          BACKUP_DIR="/home/aits/backups/aits.ocunex.com_$(date +%Y%m%d_%H%M%S)"
          mkdir -p /home/aits/backups
          
          # Create target directory if it doesn't exist
          mkdir -p "$TARGET_DIR"
          
          # List and remove files/directories one by one (avoiding .well-known)
          cd "$TARGET_DIR"
          for item in *; do
            if [ "$item" != "*" ] && [ "$item" != ".well-known" ] && [ -e "$item" ]; then
              # Backup the item first
              mkdir -p "$BACKUP_DIR"
              cp -r "$item" "$BACKUP_DIR/" 2>/dev/null || true
              # Remove the item
              rm -rf "$item"
            fi
          done
          
          # Copy new build files
          cp -r /home/zodmin/apps/aits/_work/*/client/dist/* "$TARGET_DIR/"
          
          # Set proper permissions (excluding .well-known)
          find "$TARGET_DIR" -not -path "*/.well-known*" -exec chmod 755 {} \; 2>/dev/null || true
          
          # Keep only last 5 backups
          find /home/aits/backups -name "aits.ocunex.com_*" -type d -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
